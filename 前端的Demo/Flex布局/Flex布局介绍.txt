Flex布局介绍
参考的链接：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html
1、Flex 布局是什么？Flex 是 Flexible Box 的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。
2、Flex主要是针对块状元素进行布局设计的。当然也可以对行内元素进行布局设计。
	1）任何一个容器（即：块状元素）都可以指定为 Flex布局。
		eg：
			.box{
			  display: flex;
			}
		
	2）行内元素也可以使用 Flex 布局。
		eg:
			.box{
			  display: inline-flex;
			}
	3）Webkit 内核的浏览器，必须加上-webkit前缀。
		eg：		
			.box{
			  display: -webkit-flex; /* Safari */
			  display: flex;
			}
3、注意：设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。【重点，新点】
4、基本概念
	1）采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。【重点，关键点】
	2）它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。【重点，关键点】
	3）容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。
		（1）主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；
		（2）交叉轴的开始位置叫做cross start，结束位置叫做cross end。
	4）项目默认沿主轴排列，项目占据轴的空间的单位：。
		（1）单个项目占据的主轴空间叫做main size；
		（2）单个项目占据的交叉轴空间叫做cross size。
5、到这里就可以结束了。其余的容器的属性 和 项目的属性。查看文档来帮助开发就可以了，这就算入门了。
6、项目中的样式：flex:1;等价于 flex:1 1 100%;
	1）作用：让所有弹性盒模型对象的子元素都有相同的长度，且忽略它们内部的内容。
	2）定义好容器以后，默认情况下，容器中的项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。
7、容器的6个属性：
	1）flex-direction：决定主轴的方向（即项目的排列方向），它有4个值：	
        （1）row（默认值）：主轴为水平方向，起点在左端。
        （2）row-reverse：主轴为水平方向，起点在右端。
        （3）column：主轴为垂直方向，起点在上沿。
        （4）column-reverse：主轴为垂直方向，起点在下沿。
	2）flex-wrap：定义，一条轴线排不下，如何换行。它有4个值：
		（1）nowrap（默认）：不换行。
		（2）wrap：换行，第一行在上方。
		（3）wrap-reverse：换行，第一行在下方。
	3）flex-flow：是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。【复合属性】
	4）justify-content：定义了项目在主轴上的对齐方式。它有5个值：		
        （1）flex-start（默认值）：左对齐
        （2）flex-end：右对齐
        （3）center： 居中
        （4）space-between：两端对齐，项目之间的间隔都相等。
        （5）space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。【重点】
	5）align-items：定义项目在交叉轴上如何对齐。它有5个值：	
        （1）flex-start：交叉轴的起点对齐。
        （2）flex-end：交叉轴的终点对齐。
        （3）center：交叉轴的中点对齐。
        （4）baseline: 项目的第一行文字的基线对齐。
        （5）stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。【重点，此处有坑】
	6）align-content：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。【不做考虑】
8、项目的6个属性：
	1）order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。
	2）flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。单位：权重数值
		（1）如果仅有一个设置了该属性，那么它将占据所有的剩余空间。
		（1）如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。
		（2）如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
	3）flex-shrink：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。单位：权重数值
		（1）如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。
		（2）如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
		（3）负值对该属性无效。
	4）flex-basis：定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
	5）flex：是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。【复合属性】它有两个快捷值：
		（1）auto <=>（等价于）1 1 auto
		（2）none  <=>（等价于）0 0 auto
		（3）建议：优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。
	6）align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
9、应用总结【注意】：
	1）使用了flex的容器，里面的子元素，默认排在一条线，不会换行。
	2）flex弹性布局，容器宽度变小了，里面的元素的宽度不会根据设置的来显示，会根据容器的宽度来进行分配。如果容器的宽度足够大，则正常显示，默认是沿着主轴（从到右显示）
	3）容器的属性（flex-wrap）如果选择了换行，那么其中的项目（子元素）的宽度或者高度，就是我们设置的值。不换行时，是整个容器的平分后的值。
	4）容器属性（flex-flow），控制元素的流动，即：排版方向和换行。
	5）没有将一个元素变为 变为flex容器，即：没有应用 display：flex。该元素中使用flex的其它属性。都将失效。
	6）容器属性（align-content），如果项目没有换行的，只有一根轴线起作用。如果换行了的话，就有多跟轴线。这个属性就起作用了。【重点，难点】
	7）flex-grow、flex-shrink、flex-basis的使用说明，原文链接：https://blog.csdn.net/zzz365zz/article/details/80389971
		（1）flex-grow:索取父容器的剩余空间。
		（2）flex-basis:就是width的替代品。 如果子容器设置了flex-basis或者width，那么在分配空间之前，他们会先跟父容器预约这么多的空间，然后剩下的才是归入到剩余空间，然后父容器再把剩余空间分配给设置了flex-grow的容器。
		（3） 如果同时设置flex-basis和width，那么width属性会被覆盖，也就是说flex-basis的优先级比width高。【重点，关键点】
		（4）注意：如果flex-basis和width其中有一个是auto，那么另外一个非auto的属性优先级会更高。【关键点】
	8）flex:1;
		1）空间充足，这种方式，其他项目没有分配剩余空间，它将分配所有空间。
		2）空间不足，这种方式，缩小比例都是1，即等比缩写。其它的项目默认值也是1。所以没什么影响。
		3）最关键的是第三个属性（flex-basis）。显式指定了 项目的宽度。【重点，核心点】
10、Html开发中使用VSCode,注意使用Emmet语法，可以快速开发页面。语法的参考链接：https://www.cnblogs.com/qianduanjingying/p/4927530.html

