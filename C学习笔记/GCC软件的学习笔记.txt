1、浅显易懂的GCC使用教程——初级篇，参考的链接：https://blog.csdn.net/qq_42475711/article/details/85224010
2、什么是gcc，它能干什么？
	1）GCC(GNU Compiler Collection)即GNU编译器套件，属于一种编程语言编译器，其原名为GCC（GNU C Compiler）即GNU c语言编译器，虽然缩写一样但是功能上区别很大。GCC的初衷是为GNU操作系统专门编写的一款编译器，原本的GNU是专用于编译C代码，现如今已扩展为可以编译C、C++、Java、Objective-C等多种编程语言的编译器集合了。这篇文章主要介绍gcc或g++的使用。
3、GCC、gcc、g++三者有何关系？
	1）gcc（GUN C Compiler）是GCC中的c编译器，而g++（GUN C++ Compiler）是GCC中的c++编译器。
	2）gcc和g++两者都可以编译c和cpp文件，但存在差异。gcc在编译cpp时语法按照c来编译但默认不能链接到c++的库（gcc默认链接c库，g++默认链接c++库）。g++编译.c和.cpp文件都统一按cpp的语法规则来编译。所以一般编译c用gcc，编译c++用g++。后文有时间会继续深入探讨区别。
4、开始开发前该做什么准备？
	1）软件安装教程，直接去官网下载MinGW的包管理器。
		（1）官网下载地址：https://osdn.net/projects/mingw/releases/
		（2）左侧选择“Basic Setup”选项，右侧勾选（点击“Mark for Installation”）需要安装的组件“mingw32-gcc-g++”。假设你也需要使用MinGW编译Fortran、Object-C、Ada语言的话也可以勾上相应的选项。选择好后点击左上角的Installation菜单中的Apply changes选项即开始在线下载安装相关组件。
		（3）安装好后最好配置下环境变量，把MinGw的bin目录加入到环境变量的path中，这样dos在任意目录下都可以调用bin目录下的可执行文件，其他一些软件也能找到gcc的位置。
		（4）cmd中输入gcc -v查看版本号。
	2）gcc常用指令讲解，即：C编译器常用指令讲解。
		（1）用gcc在Windows上编译*.c文件并非直接生成*.exe文件（Linux上为*.out），中间还经历了预处理、编译和汇编几个过程。
			[1]*.c文件 --预处理--> *.i文件，
			[2]*.i文件 --编译----> *.s文件，汇编代码
			[3]*.s文件 --汇编----> *.o文件，二进制的机器码。
				a、注意：经过汇编处理后生成的二进制文件Demo.o虽然已经机器码，但仍然无法运行因为少了链接操作。
			[4]*.o文件 --链接----> *.exe(Linux中:*.out)文件
		（2）gcc提供了生成中间文件的指令。
			[1]gcc Demo.c :编译C语言文件，因为指定生成文件的名称，所以默认为a.exe（Windows系统），后续都以Windows为例。
			[2]gcc Demo.c -o Demo.exe :指令-o（小写）用来指定生成的文件名。注意，生成的文件不一定要在.c所在目录，可以给出路径指定。
			[3]gcc -E Demo.c -o Demo.i :指令 -E（大写）将执行预处理操作也即生成*.i文件,gcc编译器将对#开头的指令进行解析。预处理阶段需要把调用的头文件包含进来，替换宏常量和宏代码段。
				a、注意：预处理阶段把注释都去掉了。
				b、预处理时对#类指令进行处理（包含头文件、替换宏常量和宏代码段等操作），也就不难理解为何Demo.i文件会很大了，整个工程最后被揉合成一个大文件。
				c、预处理把注释都去掉了，所以反编译回来的代码是没有注释的！因为注释早就被去掉了。
				d、使用指令gcc -E Demo.c不指定输出的文件名时内容将会直接输出到Dos框中，而不会产生文件。
				e、预处理阶段不检查语法错误。
			[4]gcc -S Demo.i -o Demo.s ：指令 -S（编译（Compiling）），执行-S（大写）指令将*.i文件中源码转化为汇编代码*.s文件。
				[1]注意：使用指令gcc -S Demo.i，即：不指定输出文件名，默认也将会在当前目录下产生文件Demo.s。
				[2]编译阶段，检测到语法错误，并给出错误提示。
				[3]Demo.s文件，用记事本打开会发现c源码已经被编译器转化为汇编代码。
			[5]gcc -c Demo.s -o Demo.o ：指令 -c（汇编（Assembling）），执行-c（小写）指令将*.s文件中的汇编源码转化未机器能执行的二进制机器码，生成文件*.o。
			[6]gcc Demo.o -o Demo.exe ：指令 gcc *.o（链接（Linking）），经过汇编处理后生成的二进制文件Demo.o虽然已经机器码，但仍然无法运行因为少了链接操作。
				a、对Demo.o执行链接操作出现报错，提示找不到函数DoNothing的定义。
				b、预处理阶段值时将头文件包含进Demo.i文件中，即:Demo.i中含有函数的声明部分，所以编译阶段只检查函数的声明和调用处是否符合函数原型，并未去检查其他*.c文件中的函数定义。
				c、链接阶段就是要把函数库中的函数定义给关联进来，找不到函数定义当然会报错。
				d、标准库函数printf为何不报错？其实库函数也不例外，在链接阶段需要关联到函数定义，它的声明部分在标准库函数头文件stdio.h中已给出，而实现部分在某个标准库中封装好了，不同的系统下还会有差异。
				e、gcc在链接时默认是包含标准库的库文件路径的，所以它能找到printf函数的定义而不会报错。
				f、而DoNothing函数是我们用户自己编写，并未封装成库的形式，所以gcc当然找不到它的定义。
				g、倘若把Demo.c中的DoNothing函数调用去掉可以成功执行链接操作吗？当然可以！【核心，重点，把调用给去掉就不会报错，就算没有函数的定义】
5、C++是简写方式，简称为CPP，全称（C Plus Plus）。中国大陆的程序员通常读作“C加加”，而西方的程序员通常读作“C Plus Plus”。
6、文中涉及的C语言源码：
	1）Demo.c文件如下：
	
		#include <stdio.h>
		#include <stdlib.h>
		#include "Test.h"

		int main()
		{
			int a = N;                      //宏常量
			int b = 2;
			int c = 0;
			
			c = a + b;
			printf("%d\n", c);
			
			CODE                            //宏替换代码段

			system("pause");
			return 0;
		}
	2）Test.c文件如下：
		#include"Test.h"
		
		void DoNothing(void)
		{
			;

			return ;
		}
	3）Test.h文件如下：
		#define N 1

		#define     CODE      if(c > 2)                          \
									{                            \
										printf("c > 2\n");       \
									}

		void DoNothing(void);           //函数声明(该函数未被调用)
		
	4）建议将3个文件创建好以后开始测试，这里就不再创建那个及其简单的Demo了。