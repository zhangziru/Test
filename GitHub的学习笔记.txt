GitHub的学习笔记
1、目的：借助github托管项目代码
2、基本概念：
	1）仓库（Repository）,仓库的意思，即你的项目，你想在GitHub上开源一个项目，那就必须要新建一个Repository，如果你开源的项目多了，你就拥有了多个Repositories。
	2）收藏（Star），仓库主页star按钮，意思为收藏项目的人数，在GitHub上若果你有一个项目获得100个star都算很不容易了！
	3）复制克隆项目（Fork），【会表示这个赋值克隆项目来源于谁的、哪个项目的的仓库】这个不好翻译，如果实在要翻译，我把它翻译成“分叉”，什么意思呢？你开源了一个项目，别人想在你这个项目的基础上做一些改进，然后应用到自己的项目中，这个时候就可以Fork你的项目（打开项目主页点击右上角的fork按钮即可），然后他的GitHub主页上就多了一个项目，只不过这个项目是基于你的项目基础（本质上是在原有项目的基础上新建一个分支），他就可以随心所欲的去改进，但是丝毫不会影响原有项目的代码与结构。
	4）发起请求（Pull Request），发起请求，这个其实是基于Fork的。如果别人在你的项目基础上做了改进，后来觉得改进的很不错，应该要把这些改进让更多的人收益，于是就想把自己的改进合并到原有项目里，这个时候他就可以发起一个Pull Request（简称PR），原有项目创建人，也就是你，就可以收到这个请求，这个时候你就会仔细review他的代码，并且测试觉得OK了，他就会接受他的PR，这个时候他做的改进【原有项目就会拥有】了。
	5）关注（Watch），这个也好理解就是观察，如果你Watch了某个项目，那么以后只要这个项目有任何更新，你都会第一时间收到关于这个项目的通知提醒。
	6）事务卡片（Issue）,发现代码Bug，但是目前没有成型代码，需要讨论时用；eg：就是你开源了一个项目，别人发现了你的项目中有bug，或者哪些地方做的不够好，他就可以给你提一个Issue，即问题，提的问题多了，也就是Issues，然后你看到了这些问题，就可以去逐个修复，修复ok了就可以一个个的Close掉。
	7）GitHub主页，账号创建成功或点击网址导航栏github图标都可以进入github主页，该页左侧主要显示用户动态以及关注用户或关注仓库的动态；右侧显示所有的git库。
	8）仓库主页，仓库主页主要显示项目信息，如：项目代码，版本，收藏/关注/fork情况等
	9）个人主页，个人信息：头像，个人简介，关注我的人，我关注的人，我关注的git库，我的开源项目，我贡献的开源项目等信息。
3、要想在GitHub上托管代码，就得有GitHub账号，我们去官网（github.com）上注册一个即可。
4、脚下留心：
	1）因为github在国外服务器，所以访问较慢或者无法访问，需要翻墙，推荐一个非常好用的翻墙工具：Shadowsocks
	2）私有仓库只能自己或者指定的朋友才有权限操作（私有仓库是收费的）
	3）新注册的用户必须验证邮箱以后才可以使用。
---------------------------------------------第一集完结---------------------------------------------

1、邮件收不到，QQ邮箱需要设置白名单，才可以收到邮件。【邮箱验证完毕以后，就可以创建托管项目】
2、创建仓库/创建项目
3、仓库主页的介绍
---------------------------------------------第二集完结【仓库主页】---------------------------------------------
1、仓库管理
	1）新建仓库文件
	2）编辑，修改文件
	3）删除文件
	4）删除的文件如何查看详细信息
	5）上传文件，点击上传或者将文件拖到指定区域。
	6）搜索仓库文件。[一个仓库中的文件也有很多的]，也可以使用快捷键来操作。
2、项目下载或检出。如果是下载的话，直接点击"Clone or download"按钮即可，如果是项目检出的话，用github地址进行项目检出

---------------------------------------------第三集完结【仓库管理】---------------------------------------------

1、GitHub 的Isuues，Bug单子：所显示有bug或者交流的问题列表。
	1）创建一个issue
	
---------------------------------------------第四集完结【GitHub的Issue使用】-------------------------------------

1、关注项目
2、收藏项目
3、个人主页
4、fork项目
5、fork项目，创建文件，原项目的文件不会有变化。fork项目是独立的项目。
6、fork项目与原项目进行文件同步。fork项目会有“Pull Request”操作,发起一个同步操作，原项目作者通过合并项目将fork项目的更改内容进行合并。
7、开源项目贡献流程：
	1）新建Issue，提交试用问题或者建议或者想法
	2）直接修改代码。步骤：fork项目->修改->pull request->原项目作者合并操作（审核）。【开源项目的流程】
---------------------------------------------第五集完结【开源项目的流程】-------------------------------------

1、GitHub安装和使用
2、通过git管理GitHub托管项目代码
3、Git是一个免费的、开源的版本控制软件。
4、下载安装：
	1）Git官网下载地址：https://www.git-scm.com/download/win(【TortoiseGit:https://tortoisegit.org/】)
	2）选择下载的文件下载
	3）双击安装
	4）组件选择：有命令行模式和图形界面模式
	5）选择命令行模式
	6）检验是否安装成功？点击桌面右击，出现两个Git单词菜单，则表示安装成功。
---------------------------------------------第六集完结【安装Git】-------------------------------------
1、Git工作区域
		1）将我们的代码提交到GitHub公共区域
		2）在本地有一个工作目录（Working Directory），这称为第一个工作区。这个工作区用来新建、修改等我们的代码。
		3）第二个工作区是我们的Git Repository（Git仓库）。当我们提交过去，就变成了一个新版本了，并且对其他人可见。
		4）暂存区，暂存已经修改的文件，最后统一提交到git仓库中。这个就是给我们一个回旋的余地。第三个区域（暂存区域）
	工作区域->暂存区域->仓库区域（称为一个新的版本）
2、如何将“工作区域”的内容提交到“暂存区域”？
	1）通过命令，比图形界面好理解。
	2）通过图形界面中的按钮
3、如何将“暂存区域”的内容提交到“仓库区域”？

2、3的答案：
git status：查看当前文件的状态，是在工作区，还是在暂存区。
git add 文件名:将文件从工作区提交到暂存区。
确定暂存区中的文件不用改了，提交到“仓库区域”
通过 git status 来查看状态，通过git commit -m "描述"  来提交。-m是添加描述。最后再查看一下状态。

---------------------------------------------第七集完结【Git基本工作流程】-------------------------------------	

1、Git初始化及仓库创建和操作
	基本信息设置
	1）设置用户名
		git config --global user.name 'itcast'
	2）设置用户名邮箱
		git config --global user.email 'itcast@qq.com'
	通过命名行模式，执行以上命令，就算基本的配置完成了。
	【注意】该设置在github仓库主页显示谁提交了该文件。
2、初始化一个新的Git仓库
	1）如何初始化？创建文件夹，文件夹名字与git仓库的名字一样就可以（不是完全一样也可以，尽量一致吧）。
	2）创建完毕以后在对应的文件夹里初始化仓库。（创建git仓库）
	3）切换到创建的文件夹里，然后通过命令行执行:git init 命令，进行仓库初始化，创建git仓库。然后会在该文件夹里生成一个git版本控制相关的隐藏文件。
-----这样就把一个仓库初始化好了。

linux命令：
	mkdir<=>创建一个文件夹；
	cd   <=>切换到指定的文件下
	touch <=>创建一个文件的命令
3、向仓库中添加文件
	工作区域->暂存区域->仓库区域（称为一个新的版本）
	git add  --将文件添加到暂存区域
	git commit -m '描述' --将暂存区域的内容提交到仓库
4、修改仓库文件
	直接修改，状态变为modify。仍然先添加到暂存区域，再提交到仓库区域。
	使用的命令跟添加文件一样。
5、删除仓库文件
	1）删除本地文件
	2）通过命令：git rm 文件名。删除暂存区域中的文件
	3）通过命令：git commit -m ''。提交暂存区域的指令。
---------------------------------------------第八集完结【Git初始化及仓库创建和操作】------------------------
1、前面的叫“仓库的本地操作”，如何在GitHub官网上的仓库操作呢，这个叫“远程仓库操作”？
	1）“远程仓库”其实实现的就是代码集中化管理的一个功能。
	2）参与开发的开发者，都会把代码提交到远程仓库中，然后实现代码的共享。提交到“远程仓库中”大家都可以更新了。
	3）GitHub仓库的功能，代码的备份、共享。这两个功能非常的重要，对于异步的开发。
2、如何将本地的仓库同步到远程的仓库中呢？
	1）工作区域->暂存区域->仓库区域（本地仓库）
	2）将本地的仓库同步到远程仓库。
	3）通过命令：git push  将本地仓库提交到远程仓库。
3、Git克隆操作
	1、目的：将远程仓库（github对应的项目）复制到本地
	2、代码：git clone 仓库地址。仓库地址由来，从点击github中的“Clone or download”下载按钮中获取的。
4、设置权限

---------------------------------------------第九集完结【Git管理远程仓库】------------------------
1、GitHub 	Pages搭建网站
2、个人站点
3、访问地址
	http://用户名.github.io.//这里的用户名为GitHub的用户名
4、搭建步骤
	1）创建个人站点->新建仓库（备注：仓库名必须是【用户名.github.io】）//用户名为github的用户名
	2）在仓库下新建index.html即可。
5、注意事项：
	1）github pages仅支持静态网页
	2）仓库里面只能是.html文件
6、分支
7、设置主题
---------------------------------------------【Git 后续命令补充】------------------------
【GIT 命令 获取】
【GIT 命令 拉取】
git pull 将服务器版本库内容同步到本地版本库
【GIT 命令 暂存】
git add file1  ：添加单个文件
git add .  ：将工作区中的所有“更改”和“新增”的都添加到“暂存区”
git add -p file1 或者 git add --patch file1  ：暂存文件中的区块（每修改一个地方称为一个区块） 等价<=>交互模式下：patch
git diff --cached file1  ：显示“暂存区”中文件与“版本库”中文件的差异  等价<=> 交互模式下：diff
交互模式操作参考：https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98
git add -i ：进入“交互模式”，通过交互的方式，可以将文件添加到“暂存区”
交互模式下:update(或者输入指令编号：2)，进行选取“工作区中原有文件”添加到“暂存区”，选中对应的文件编号，然后回车【多个文件，用逗号隔开】
交互模式下:add untracked(或者输入指令编号：4)，进行选取“工作区中新增文件”添加到“暂存区”，选中对应的文件编号，然后回车【多个文件，用逗号隔开】
交互模式下:revert(或者输入指令编号：3)，将“暂存区中文件”移除，返回到“工作区”，选中对应的文件编号，然后回车【多个文件，用逗号隔开】
交互模式下:diff(或者输入指令编号：6)，会列出“暂存区中文件”，选中对应的文件编号，然后回车，可以查看，“暂存中的文件”与“版本库中的文件”的差异
交互模式下:patch(或者输入指令编号：5)，会列出“工作区中文件”，选中对应的文件编号，然后回车，可以选择“暂存文件中的各个区块”然后退出，该文件将会被提交	  到暂存区（里面包含，我们选中“暂存的区块”），文件中“未被暂存的区块”，将会留在“工作区”
【Git 命令 仓库初始化】
git init  ：将本地新创建的文件夹 设置为Git本地仓库
【Git 命名 为本地仓库 指定远程地址】
git remote add orgin 仓库地址   ：为本地仓库指定远程地址。  
仓库地址无需加 引号。eg： git remote  add orgin https://github.com/zhangziru/Test.git
【Git 命令 查看 远程仓库地址】
git remote -v
【GIT 命令 提交】
git commit -m "备注" ：将“暂存区”的修改提交到“本地仓库”
【GIT 命令 推送】
git push origin master ：命令将本地版本库内容推送到服务器 指定分支 版本库 
【GIT 命令 同步】
【GIT 命令 查看分支】
git branch -l :查看本地分支
git branch -r :查看远程分支
git branch -a :查看全部分支（远程的和本地的）[常用命令]
【GIT 命令 分支-创建、切换、创建并切换到对应的分支】
git branch <分支名称> ：branch命令不会将我们带入分支，只是基于当前分支创建一个新分支。
git checkout <分支名称>：切换到指定分支[常用命令]
git checkout –b <分支名称>：直接创建分支并切换到该分支
【GIT 命令 贮藏或储藏】
git stash ：保存当前分支的修改，不提交到本地仓库[常用命令]（切换分支时，由于当前分支有修改。不用放弃当前分支的修改，贮藏当前分支的修改。然后可以切换分支。）
git stash list ：查看 贮藏 或 储藏 列表
git stash apply ：取回当前分支的修改内容（方法1）[常用]（备注：应用了贮藏的修改，但是修改的内容仍在贮藏列表中，需要手动清除该贮藏记录）
git stash apply @stash{2} ：取回当前分支的修改内容
git stash pop ：取回当前分支的修改内容（方法2）[常用]（备注：应用了贮藏的修改，但是修改的内容也被移除了）
git stash drop [stashname] ：从贮藏列表中删除 指定名称的 贮藏版本的代码更改 
git stash branch [branchname] ：从暂存中创建分支
【Git 命令 忽略本地文件更改】（类似于SVN中的ignore on commit。）
git update-index --assume-unchanged [file-path] ：忽略本地文件更改
git update-index --no-assume-unchanged [file-path] ：[取消]忽略本地文件更改
【Git 命令 撤销】
git checkout[file]  ：撤销“工作区”的指定文件到的更改
git checkout -- file     :可以丢弃工作区的修改，即：撤销更改（功能同上述一样）
git checkout[commit] [file]  ：恢复某个commit的指定文件（本地仓库未推送的文件）到“暂存区”和“工作区”
git checkout .	:撤销"工作区"的所有文件的修改（不要轻易的执行）
git reset --soft HEAD^  :恢复“本地仓库”的最新提交到“暂存区”
git reset --mixed HEAD^  :恢复“本地仓库”的最新提交到“工作区”
【Git 命令 查看未推送的记录】
git cherry -v	:查看本地仓库未推送的记录
【Git 本地，拉取服务器上的代码异常，使用服务器上的分支，强制覆盖本地】
git reset --hard origin/master (这里master要修改为对应的分支名)
git reset --hard HEAD^（版本回退，HEAD指的是当前版本，HEAD^是上一版本，HEAD^^是上上版本，如果是n次前的版本，应当是HEAD~n，或者直接是提交的版本号）
注意：版本回退需要使用“git push -f”提交更改。
适用场景： 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用这种方法。【撤回已经提交的远程的代码】
git revert -n 版本号  ：反做
适用场景： 如果我们想恢复之前的某一版本（该版本不是merge类型），但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。（原文链接：https://blog.csdn.net/yxlshk/article/details/79944535）
【Git 查看当前配置 用户名，邮箱】
git config user.name  --查看用户名
git config user.email  --查看箱地址
【Git 查看日志】
git log  --查看当前分支的 提交记录
git log --graph -all   --在Brash界面中 查看所有的记录
gitk --all  --在Git的GUI（可视化界面）中显示所有的记录
